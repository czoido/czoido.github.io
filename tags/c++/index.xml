<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on Carlos Zoido</title>
    <link>https://czoido.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on Carlos Zoido</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Nov 2020 13:08:06 +0100</lastBuildDate><atom:link href="https://czoido.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adding dependencies to your Node.js native addons using Conan</title>
      <link>https://czoido.github.io/posts/node-native-module-conan/</link>
      <pubDate>Sun, 08 Nov 2020 13:08:06 +0100</pubDate>
      
      <guid>https://czoido.github.io/posts/node-native-module-conan/</guid>
      <description>We have already covered how to write a simple C++ hello world native addon in a previous post. Now, we are going to add dependencies to that simple example, manage them with Conan and run the code in Node.js.
If you are not familiar with Conan, please check the getting started in the documentation.
As we explained in the previous post the native addons are usually built generating a project file for your build-system using node-gyp.</description>
    </item>
    
    <item>
      <title>Creating C&#43;&#43; Node Addons using N-API</title>
      <link>https://czoido.github.io/posts/creating-c&#43;&#43;-node-addons-using-napi/</link>
      <pubDate>Fri, 06 Nov 2020 12:31:18 +0100</pubDate>
      
      <guid>https://czoido.github.io/posts/creating-c&#43;&#43;-node-addons-using-napi/</guid>
      <description>With Node.js addons we can load our C++ libraries as if they were ordinary Node.js modules. The recommended way to implement these addons is using the N-API. The N-API is delivered as a part of the Node.js distribution. since v8 and became stable in v10.
One &amp;ldquo;Hello World&amp;rdquo; addon could look something like this:
// hello.cpp #include &amp;lt;node.h&amp;gt; namespace demo { using v8::FunctionCallbackInfo; using v8::Isolate; using v8::Local; using v8::Object; using v8::String; using v8::Value; void HelloWorld(const FunctionCallbackInfo&amp;lt;Value&amp;gt;&amp;amp; args) { Isolate* isolate = args.</description>
    </item>
    
  </channel>
</rss>
